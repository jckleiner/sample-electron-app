import {
  app, BrowserWindow, Menu, Tray, ipcMain
} from 'electron'
import fs from 'fs'
import path from 'path'
import fuzzysort from 'fuzzysort'

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
// eslint-disable-next-line global-require
if (require('electron-squirrel-startup')) {
  app.quit()
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: path.join(__dirname, 'preloadScripts/preload.js')
    }
  })

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)

  // Open the DevTools.
  mainWindow.webContents.openDevTools()
}

function handleSetTitle(event: { sender: any }, title: string) {
  const webContents = event.sender
  const win = BrowserWindow.fromWebContents(webContents)
  win.setTitle(title)
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  ipcMain.on('set-title', handleSetTitle)
  createWindow()
})

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow()
  }
})

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

function readFile() {
  fs.readFile('/Users/kleiner/.bashrc', 'utf8', (err, data) => {
    if (err) {
      console.error('\n--> error readFile()', err)
      return
    }
    console.log('\n--> readFile()', data)
  })

  const result = fuzzysort.single('query', 'some string that contains my query.')

  // const mystuff = [{ file: 'Monitor.cpp' }, { file: 'MeshRenderer.cpp' }]
  // const results = fuzzysort.go('mr', mystuff, { key: 'file' })
  // [{score:-18, obj:{file:'MeshRenderer.cpp'}}, {score:-6009, obj:{file:'Monitor.cpp'}}]
  console.log('\n---> result', result)
  const highlight = fuzzysort.highlight(result, '<b>', '</b>')
  console.log('\n---> highlight:', highlight)
}
readFile()

let tray!: Tray

const initTray = () => {
  tray = new Tray('./src/electron/icon.png')

  const contextMenu = Menu.buildFromTemplate([
    { label: 'Item1', type: 'radio' },
    { label: 'Item2', type: 'radio' },
    { label: 'Item3', type: 'radio', checked: true },
    { label: 'Item4', type: 'radio' },
    { label: 'Connecting...' },
    { label: 'Close', click() { console.log('close clicked') } },
    {
      label: 'Show Colors',
      id: 'color-scale',
      accelerator: 'CmdOrCtrl+1',
      enabled: true
    }
  ])

  tray.on('click', () => {
    console.log('clicked tray!')
  })

  // right-click and some other events does not work (for MacOs?) if you use a contextMenu and did tray.setContextMenu(contextMenu)
  tray.on('right-click', () => {
    console.log('right-clicked tray!')
  })

  // Make a change to the context menu
  contextMenu.items[3].checked = true
  setTimeout(() => {
    console.log('2 secs waited, disabling item...')
    const myItem = contextMenu.getMenuItemById('color-scale')
    myItem.enabled = false
  }, 2000)

  tray.setToolTip('This is my application.')
  tray.setContextMenu(contextMenu)
}

app.whenReady().then(initTray)
